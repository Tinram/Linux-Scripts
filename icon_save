#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    icon_save

    Gnome / Nemo desktop icon position restore.
    Autogenerate a bash script to restore the current desktop icon positions.

    Author         Martin Latter
    Copyright      Martin Latter 25/09/2019
    Version        0.03
    License        GNU GPL version 3.0 (GPL v3); http://www.gnu.org/licenses/gpl.html
    Link           https://github.com/Tinram/Linux-Scripts.git
"""


from datetime import datetime
import os
import stat
import subprocess


def main():

    """
        Create bash script of current desktop icon positions.
    """

    bash_file = 'icon_restore'
    bash_output = ''

    nemo = subprocess.check_output('nemo --version', shell=True)
    nemo_maj_ver = int(nemo[5:6])

    if nemo_maj_ver > 3:
        info = 'gio info -a metadata::nemo-icon-position ~/Desktop/*'
    else:
        info = 'gvfs-info -a metadata::nemo-icon-position ~/Desktop/*'

    icon_data = subprocess.check_output(info, shell=True)
    icon_strings = icon_data.splitlines()

    i = 0
    icon_len = len(icon_strings) - 1

    while i < icon_len:

        j = icon_strings[i].index('Desktop/'.encode())

        if j:
            icon_name = icon_strings[i][(j + 8):]
            coords = icon_strings[i + 2].strip()
            coords = coords.replace('nemo-icon-position:'.encode(), 'nemo-icon-position'.encode())
            if nemo_maj_ver > 3:
                bash_output += 'gio set -t string ~/Desktop/' + icon_name.decode() + ' ' + coords.decode() + '\n'
            else:
                bash_output += 'gvfs-set-attribute -t string ~/Desktop/' + icon_name.decode() + ' ' + coords.decode() + '\n'

        i += 3

    bash_header = '#!/bin/bash\n' \
    '# autogenerated file from icon_save.py (' + str(datetime.now()) + ')\n' \
    '# 1. ensure Desktop \'Auto-arrange\' is off\n' \
    '# 2. execute this script to revert desktop icon positions\n' \
    '# 3. press F5 on Desktop to refresh' + '\n'

    bash_output = bash_header + bash_output

    with open(bash_file, 'w') as fout:
        fout.write(bash_output)

    os.chmod(bash_file, stat.S_IRWXU)


if __name__ == '__main__':
    main()
